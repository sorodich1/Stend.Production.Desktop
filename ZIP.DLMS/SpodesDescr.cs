// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using System.Linq;

namespace ZIP.DLMS.Spodes
{
    public class ObisGroupValue
    {
        public int[] Values { get; set; }
        public string Description { get; set; }
        public List<ObisGroupValue> Next { get; set; }
        public ObisGroupValue()
        {
            Next = null;
        }
    }

    public class SpodesDescr
    {
        const string csIllegalLN = "Недопустимый OBIS-код.";

        private const string csElectricityID = "ИД экземпляра данных электроэнергии";
        private const string csBilling = "расчетного периода";
        private const string csBillingCounter = "Счетчик " + csBilling;
        private const string csBillingNumber = "Число доступных расчетных периодов";
        private const string csBillingScheme2 = "Схема 2";
        private const string csTimeStamp = "Метка времени";
        private const string csLoadProfile = "Профиль нагрузки";


        private static int[]
            c1Reserv = Enumerable.Range(100, 28)
                .Concat(Enumerable.Range(200, 40))
                .Concat(Enumerable.Range(241, 15)).ToArray(),
            c1Manuf = Enumerable.Range(128, 72).Append(240).ToArray();

        /// <summary>
        /// Описание группы D объектов c OBIS-кодом, начинающимся с 1.0.0
        /// </summary>
        private static List<ObisGroupValue> A1C0D = new List<ObisGroupValue>()
        {
            // Group D = 0
            new ObisGroupValue()
            {
                Values = new int[] { 0 }, Description = "",
                // Group E
                Next = new List<ObisGroupValue>()
                {
                    //1.0.0.0.[0-9]
                    new ObisGroupValue() { Values = Enumerable.Range(0, 10).ToArray(), Description = $"{csElectricityID} #$(E+1)" },
                    //1.0.0.0..255
                    new ObisGroupValue() { Values = new int[] { 255 }, Description = $"{csElectricityID} (комбинированный)" }
                }
            },
            // Group D = 1
            new ObisGroupValue()
            {
                Values = new int[] { 1 }, Description = "",
                // Group E
                Next = new List<ObisGroupValue>()  // 1.0.0.1.*
                {
                    // 1.0.0.1.0
                    new ObisGroupValue()
                    {
                        Values = new int[] { 0 }, Description = "" ,
                        // Group F
                        Next = new List<ObisGroupValue>()  // 1.0.0.1.0.*
                        {
                            new ObisGroupValue() { Values = Enumerable.Range(0, 100).ToArray(), Description = $"{csBillingCounter} #$F" },
                            new ObisGroupValue() { Values = new int[] { 255 }, Description = csBillingCounter },
                        }
                    }, 
                    // 1.0.0.1.1
                    new ObisGroupValue()
                    {
                        Values = new int[] { 1 }, Description = "",
                        Next = new List<ObisGroupValue>()  // 1.0.0.1.1.*
                        {
                            // Group F
                            new ObisGroupValue() { Values = new int[] { 255 }, Description = csBillingNumber },
                        }
                    },
                    // 1.0.0.1.2 Временные метки объектов расчетных периодов (первая схема)
                    new ObisGroupValue()
                    {
                        Values = new int[] { 2 }, Description = "",
                        Next = new List<ObisGroupValue>()  // 1.0.0.1.2.*
                        {
                            // Group F
                            new ObisGroupValue() { Values = Enumerable.Range(0, 100).ToArray(), Description = $"{csTimeStamp} {csBilling} #$F" },
                            new ObisGroupValue() { Values = new int[] { 255 }, Description = $"{csTimeStamp} последнего завершенного {csBilling}" },
                        }
                    },
                    // 1.0.0.1.3 Временные метки объектов расчетных периодов (вторая схема)
                    new ObisGroupValue()
                    {
                        Values = new int[] { 3 }, Description = csBillingScheme2,
                        Next = new List<ObisGroupValue>()  // 1.0.0.1.3.*
                        {
                            // Group F
                            new ObisGroupValue() { Values = Enumerable.Range(0, 100).ToArray(), Description = $"{csTimeStamp} {csBilling} #$F" },
                            new ObisGroupValue() { Values = new int[] { 255 }, Description = $"{csTimeStamp} последнего завершенного {csBilling}" },
                        }
                    },
                    // 1.0.0.1.4
                    new ObisGroupValue()
                    {
                        Values = new int[] { 1 }, Description = csBillingScheme2,
                        Next = new List<ObisGroupValue>()  // 1.0.0.1.4.*
                        {
                            // Group F
                            new ObisGroupValue() { Values = new int[] { 255 }, Description = csBillingNumber },
                        }
                    },
                }
            },
            // Group D = 2
            new ObisGroupValue()
            {
                Values = new int[] { 2 }, Description = "",
                // Group E
                Next = new List<ObisGroupValue>()  // 1.0.0.2.*
                {
                    new ObisGroupValue() { Values = new int[] { 0 }, Description = "Активный идентификатор встроенного ПО" },
                    new ObisGroupValue() { Values = new int[] { 1 }, Description = "",
                        Next = new List<ObisGroupValue>()  // 1.0.0.2.1.*
                        {
                            // Group F
                            new ObisGroupValue() { Values = new int[] { 0 }, Description = "Parameter record number" },
                            new ObisGroupValue() { Values = new int[] { 255 }, Description = "Parameter number line 1" },
                        }
                    },
                    new ObisGroupValue() { Values = new int[] { 2 }, Description = "Time switch program number" },
                    new ObisGroupValue() { Values = new int[] { 3 }, Description = "RCR program number" },
                    new ObisGroupValue() { Values = new int[] { 4 }, Description = "Идентификатор схемы подключения счетчика" },
                }
            },
        };

        private static List<ObisGroupValue> A1C = new List<ObisGroupValue>()
        {
            new ObisGroupValue() { Values = new int[] { 0 }, Description = "Объекты общего назначения", Next = A1C0D},
            new ObisGroupValue() { Values = new int[] { 1, 21, 41, 61 }, Description = "Активная мощность, импорт (QI+QIV)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 2, 22, 42, 62 }, Description = "Активная мощность, экспорт (QII+QIII)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 3, 23, 43, 63 }, Description = "Реактивная мощность, импорт (QI+QII)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 4, 24, 44, 64 }, Description = "Реактивная мощность, экспорт (QIII+QIV)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 5, 25, 45, 65, }, Description = "Реактивная мощность QI", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 6, 26, 46, 66 }, Description = "Реактивная мощность QII", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 7, 27, 47, 67 }, Description = "Реактивная мощность QIII", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 8, 28, 48, 68 }, Description = "Реактивная мощность QIV", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 9, 29, 49, 69 }, Description = "Полная мощность, импорт (QI+QIV)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 10, 30, 50, 70}, Description = "Полная мощность, экспорт(QII+QIII)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 11, 31, 51, 71}, Description = "Ток фазы (С=11 - любой)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 12, 32, 52, 72 }, Description = "Напряжение фазы (С=12 - любой)", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 13, 33, 53, 73 }, Description = "Фактор мощности со знаком", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 14, 34, 54, 74 }, Description = "Частота сети", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 15, 35, 55, 75 }, Description = "|Активная мощность|, (abs(QI+QIV)+abs(QII+QIII))", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 16, 36, 56, 76 }, Description = "Сетевая мощность(abs(QI+QIV)-abs(QII+QIII))", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 17, 37, 57, 77 }, Description = "Активная мощность QI", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 18, 38, 58, 78 }, Description = "Активная мощность QII", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 19, 39, 59, 79 }, Description = "Активная мощность QIII", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 20, 40, 60, 80 }, Description = "Активная мощность QIV", Next = A1CXD },
            new ObisGroupValue() { Values = new int[] { 81 }, Description = "Угловые измерения" },
            new ObisGroupValue() { Values = new int[] { 82 }, Description = "Безразмерные величины(счет импульсов)" },
            new ObisGroupValue() { Values = new int[] { 83 }, Description = "Потери в силовых трансформаторах и ЛЭП" },
            new ObisGroupValue() { Values = new int[] { 84, 85, 86, 87 }, Description = "Коэф. мощности (cos ɸ) без знака" },
            new ObisGroupValue() { Values = new int[] { 88 }, Description = "Удельные потери в ЛЭП" },
            new ObisGroupValue() { Values = new int[] { 89 }, Description = "Удельные потери в силовых трансформаторах" },
            new ObisGroupValue() { Values = new int[] { 90 }, Description = "Суммарный ток всех фаз" },
            new ObisGroupValue() { Values = new int[] { 91 }, Description = "Ток нейтрали" },
            new ObisGroupValue() { Values = new int[] { 92 }, Description = "Напряжение нейтрали" },
            new ObisGroupValue() { Values = new int[] { 93 }, Description = "Коды, устанавливаемые ассоциациями" },
            new ObisGroupValue() { Values = new int[] { 94 }, Description = "Коды, устанавливаемые странами(в России)" },
            new ObisGroupValue() { Values = new int[] { 96 }, Description = "Электрические константы ПУ" },
            new ObisGroupValue() { Values = new int[] { 97 }, Description = "Объекты регистров ошибок" },
            new ObisGroupValue() { Values = new int[] { 98 }, Description = "Списки объектов" },
            new ObisGroupValue() { Values = new int[] { 99 }, Description = "Профили электрических величин", Next = A1C99D },
            new ObisGroupValue() { Values = c1Reserv, Description = "Резерв" },
            new ObisGroupValue() { Values = c1Manuf, Description = "Коды, устанавливаемые производителями" },
        };

        private static int[] d1Manuf = Enumerable.Range(128, 72).Append(240).ToArray();
        private static List<ObisGroupValue> A1CXD = new List<ObisGroupValue>()
        {
            new ObisGroupValue() { Values = new int[] { 0 }, Description = "Среднее значение за расчетный период (с посл. сброса)" },
            new ObisGroupValue() { Values = new int[] { 1 }, Description = "Общий минимум 1 (с начала эксплуатации)" },
            new ObisGroupValue() { Values = new int[] { 2 }, Description = "Общий максимум 1 (с начала эксплуатации)" },
            new ObisGroupValue() { Values = new int[] { 3 }, Description = "Минимум 1 (в течение расчетного периода)" },
            new ObisGroupValue() { Values = new int[] { 4 }, Description = "Текущее среднее 1 (из регистров усреднения)" },
            new ObisGroupValue() { Values = new int[] { 5 }, Description = "Последнее среднее 1 (из регистров усреднения)" },
            new ObisGroupValue() { Values = new int[] { 6 }, Description = "Максимум 1 (в течение расчетного периода)" },
            new ObisGroupValue() { Values = new int[] { 7 }, Description = "Мгновенное значение" },
            new ObisGroupValue() { Values = new int[] { 8 }, Description = "Интеграл с начала эксплуатации до текущего момента" },
            new ObisGroupValue() { Values = new int[] { 9 }, Description = "Интеграл с начала текущего расчетного периода" },
            new ObisGroupValue() { Values = new int[] { 10 }, Description = "Интеграл превышения величиной установленного порога" },
            new ObisGroupValue() { Values = new int[] { 11 }, Description = "Общий минимум 2" },
            new ObisGroupValue() { Values = new int[] { 12 }, Description = "Общий максимум 2" },
            new ObisGroupValue() { Values = new int[] { 13 }, Description = "Минимум 2" },
            new ObisGroupValue() { Values = new int[] { 14 }, Description = "Текущее среднее 2" },
            new ObisGroupValue() { Values = new int[] { 15 }, Description = "Последнее среднее 2" },
            new ObisGroupValue() { Values = new int[] { 16 }, Description = "Максимум 2" },
            new ObisGroupValue() { Values = new int[] { 17 }, Description = "Интеграл с начала эксплуатации до конца последнего закончившегося периода записи с периодом 1" },
            new ObisGroupValue() { Values = new int[] { 18 }, Description = "Интеграл с начала эксплуатации до конца последнего закончившегося периода записи с периодом 2" },
            new ObisGroupValue() { Values = new int[] { 19 }, Description = "Интеграл с начала текущего расчетного периода до конца последнего периода записи с периодом 1" },
            new ObisGroupValue() { Values = new int[] { 20 }, Description = "Интеграл с начала текущего расчетного периода до конца последнего периода записи с периодом 2" },
            new ObisGroupValue() { Values = new int[] { 21 }, Description = "Общий минимум 3" },
            new ObisGroupValue() { Values = new int[] { 22 }, Description = "Общий максимум 3" },
            new ObisGroupValue() { Values = new int[] { 23 }, Description = "Минимум 3" },
            new ObisGroupValue() { Values = new int[] { 24 }, Description = "Текущее среднее 3" },
            new ObisGroupValue() { Values = new int[] { 25 }, Description = "Последнее среднее 3" },
            new ObisGroupValue() { Values = new int[] { 26 }, Description = "Максимум 3" },
            new ObisGroupValue() { Values = new int[] { 27 }, Description = "Текущее среднее 5" },
            new ObisGroupValue() { Values = new int[] { 28 }, Description = "Текущее среднее 6" },
            new ObisGroupValue() { Values = new int[] { 29 }, Description = "Интеграл от начала текущего периода записи профиля с периодом 1 до текущего момента" },
            new ObisGroupValue() { Values = new int[] { 30 }, Description = "Интеграл от начала текущего периода записи профиля с периодом 2 до текущего момента" },
            new ObisGroupValue() { Values = new int[] { 31 }, Description = "Порог нижнего предела (провала)" },
            new ObisGroupValue() { Values = new int[] { 32 }, Description = "Счётчик провалов" },
            new ObisGroupValue() { Values = new int[] { 33 }, Description = "Продолжительность провала" },
            new ObisGroupValue() { Values = new int[] { 34 }, Description = "Величина провала" },
            new ObisGroupValue() { Values = new int[] { 35 }, Description = "Порог верхнего предела (выброса)" },
            new ObisGroupValue() { Values = new int[] { 36 }, Description = "Счётчик выбросов" },
            new ObisGroupValue() { Values = new int[] { 37 }, Description = "Продолжительность выброса" },
            new ObisGroupValue() { Values = new int[] { 38 }, Description = "Величина выброса" },
            new ObisGroupValue() { Values = new int[] { 39 }, Description = "Порог пропадания" },
            new ObisGroupValue() { Values = new int[] { 40 }, Description = "Счётчик пропаданий" },
            new ObisGroupValue() { Values = new int[] { 41 }, Description = "Продолжительность пропадания" },
            new ObisGroupValue() { Values = new int[] { 42 }, Description = "Величина пропадания" },
            new ObisGroupValue() { Values = new int[] { 43 }, Description = "Общая продолжительность провалов" },
            new ObisGroupValue() { Values = new int[] { 44 }, Description = "Общая продолжительность выбросов" },
            new ObisGroupValue() { Values = new int[] { 45 }, Description = "Общая продолжительность пропаданий" },
            new ObisGroupValue() { Values = new int[] { 46 }, Description = "Согласованное значение" },
            new ObisGroupValue() { Values = new int[] { 51 }, Description = "Минимум для периода записи 1" },
            new ObisGroupValue() { Values = new int[] { 52 }, Description = "Минимум для периода записи 2" },
            new ObisGroupValue() { Values = new int[] { 53 }, Description = "Максимум для периода записи 1" },
            new ObisGroupValue() { Values = new int[] { 54 }, Description = "Максимум для периода записи 2" },
            new ObisGroupValue() { Values = new int[] { 55 }, Description = "Среднее за тест" },
            new ObisGroupValue() { Values = new int[] { 58 }, Description = "Интеграл за время теста" },
            new ObisGroupValue() { Values = d1Manuf, Description = "Коды, определяемые производителями" },
        };


        /// <summary>
        /// значения группы D для объектов c A.B.C = 1.0.99 - профили электрических величин
        /// </summary>
        /// 
        private static List<ObisGroupValue> A1C99D = new List<ObisGroupValue>()
        {
            // 1.0.99.1-2.0-127.255
            new ObisGroupValue()
            {
                Values = new int[] { 1, 2 }, Description = csLoadProfile + " за пeриод записи #$D)",
                // Group E
                Next = new List<ObisGroupValue>()
                {
                    // 1.0.99.1-2.1-127.255
                    new ObisGroupValue() { Values = Enumerable.Range(1, 127).ToArray(), Description = "#$(E+1)" },
                    // 1.0.99.1-2.0.255
                    new ObisGroupValue() { Values = new int[] { 0 }, Description = "" }
                }
            },
            // 1.0.99.3.0.255
            new ObisGroupValue()
            {
                Values = new int[] { 3 }, Description = csLoadProfile  +  " во время испытаний",
                // Group E
                Next = new List<ObisGroupValue>()  // 1.0.0.1.*
                {
                    // 1.0.0.1.0
                    new ObisGroupValue()
                    {
                        Values = new int[] { 0 }, Description = "",
                    }
                }
            },
            // 1.0.99.10.1-3.255
            new ObisGroupValue()
            {
                Values = new int[] { 10 }, Description = "",
                // Group E
                Next = new List<ObisGroupValue>()
                {
                    // 1.0.99.10.1.255
                    new ObisGroupValue()
                    {
                        Values = new int[] { 1 }, Description = "Профиль провалов напряжения",
                    },
                    // 1.0.99.10.2.255
                    new ObisGroupValue()
                    {
                        Values = new int[] { 2 }, Description = "Профиль превышения порога напряжения",
                    },
                    // 1.0.99.10.3.255
                    new ObisGroupValue()
                    {
                        Values = new int[] { 3 }, Description = "Профиль снижения ниже порога напряжения",
                    },
                }
            },
            // 1.0.99.11.* Профиль гармоник напряжения
            new ObisGroupValue()
            {
                Values = new int[] { 11 }, Description = "Профиль гармоник напряжения",
                // Group E
                Next = new List<ObisGroupValue>()
                {
                    // 1.0.99.11.[1-120,124-127].255
                    new ObisGroupValue()
                    {
                        Values = Enumerable.Range(1, 119).Concat(Enumerable.Range(124, 4)).ToArray(), Description = "#$E",
                    }
                }
            },
            // 1.0.99.12.* Профиль гармоник тока
            new ObisGroupValue()
            {
                Values = new int[] { 12 }, Description = "Профиль гармоник тока",
                // Group E
                Next = new List<ObisGroupValue>()
                {
                    // 1.0.99.12.[1-120,124-127].255
                    new ObisGroupValue()
                    {
                        Values = Enumerable.Range(1, 119).Concat(Enumerable.Range(124, 4)).ToArray(), Description = "#$E",
                    }
                }
            },
            // 1.0.99.13.* Профиль гармоник тока
            new ObisGroupValue()
            {
                Values = new int[] { 13 }, Description = "Профиль дисбаланса напряжения",
                // Group E
                Next = new List<ObisGroupValue>()
                {
                    // 1.0.99.13.0.255
                    new ObisGroupValue()
                    {
                        Values = new int[] { 0 }, Description = "",
                    }
                }
            },
        };

        private static string ParseOBIS(byte[] obis, uint groupInx = 0, List<ObisGroupValue> obisGroup = null)
        {
            string description = null;
            if ((obis != null) && (obis.Length == 6) && (groupInx < obis.Length))
                try
                {
                    byte groupValue = obis[groupInx];
                    ObisGroupValue groupList = null;
                    if (groupInx == 0)
                    {
                        if (groupValue == 1)
                            groupList = A1C.FirstOrDefault(item => Array.IndexOf(item.Values, groupValue) != -1);
                        else throw new Exception("Описание объектов групп A <> 1 не поддерживается");
                    }
                    else
                    {
                        if (obisGroup != null)
                            groupList = obisGroup.FirstOrDefault(item => Array.IndexOf(item.Values, groupValue) != -1);
                    }
                    if (groupList != null)
                    {
                        description = groupList.Description;
                        if (groupList.Next != null)
                        {
                            groupInx++;
                            description += ParseOBIS(obis, groupInx, groupList.Next);
                        }
                    }
                }
                catch (Exception)
                {
                    return null;
                }
            return description;
        }

        /// <summary>
        /// Получение наименования и расширенного описания объекта с указанным OBIS-кодом
        /// в соответствии с правилами протокола СПОДЭС (по умолчанию)
        /// </summary>
        /// <param name="obis">OBIS-код объекта</param>
        /// <param name="itemDescription">расширенное описание объекта</param>
        /// <returns>наименование объекта</returns>
        /// <remarks>
        /// Результат формируется на базе стандартного описания OBIS-групп СПОДЭС для электрических объектов
        /// Для прочих объектов возвращается null
        /// </remarks>
        public static string GetSpodesItemName(string obis, out string itemDescription)
        {
            itemDescription = null;
            return null;
            //string description = null;
            //if (obis != null)
            //    try
            //    {
            //        byte[] items = obis.Split('.').Cast<byte>().ToArray();
            //        if (items.Length != 6)
            //        {
            //            throw new GXDLMSException(csIllegalLN);
            //        }

            //        int inx = 0;
            //        foreach (byte groupValue in items)
            //        {
            //            switch (inx)
            //            {
            //                case 0: // группа A
            //                    // Обрабатывабтся только коды для электрических параметров.
            //                    if (groupValue != 1)
            //                        // объекты, не относящиеся к Электроэнергии 
            //                        throw new GXDLMSException(csIllegalLN);
            //                    break;
            //                case 2: // группа C
            //                    foreach (var c_groups in A1C)
            //                    {
            //                        int group = c_groups.Values.FirstOrDefault(value => (byte)value == groupValue);
            //                        if (group != 0)
            //                        {
            //                            description = c_groups.Description;
            //                            break;
            //                        }
            //                    }

            //                    if (string.IsNullOrWhiteSpace(description))
            //                        throw new GXDLMSException(csIllegalLN);

            //                    break;
            //                case 3: // группа D
            //                    foreach (var d_groups in D1)
            //                    {
            //                        int group = d_groups.Values.FirstOrDefault(value => (byte)value == groupValue);
            //                        if (group != 0)
            //                        {
            //                            if (d_groups.Description.Contains("Интеграл"))
            //                                description = description.Replace("мощность", "энергия");

            //                            itemDescription = description + Environment.NewLine + d_groups.Description;
            //                            break;
            //                        }
            //                    }
            //                    break;

            //                    // TODO: доделать для остальных групп кода
            //            }
            //            inx++;
            //        }
            //    }
            //    catch
            //    {
            //        return null;
            //    }
            //return description;
        }

    }
}
